name: Test Manifest

on:
  workflow_dispatch:
    inputs:
      ManifestURL:
        description: "Manifest URL"
        required: true

jobs:
  test:
    name: Test manifest
    runs-on: windows-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Take screenshot using FFmpeg
        shell: powershell
        run: |
          # Create directory for downloads
          New-Item -ItemType Directory -Path ".\downloads" -Force

          # Download portable FFmpeg
          $ffmpegUrl = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
          $ffmpegZip = ".\downloads\ffmpeg.zip"
          
          Write-Host "Downloading FFmpeg..."
          Invoke-WebRequest -Uri $ffmpegUrl -OutFile $ffmpegZip -UseBasicParsing
          
          # Extract FFmpeg
          Write-Host "Extracting FFmpeg..."
          Expand-Archive -Path $ffmpegZip -DestinationPath ".\ffmpeg" -Force
          
          # Find the ffmpeg.exe path
          $ffmpegExe = Get-ChildItem -Path ".\ffmpeg" -Recurse -Filter "ffmpeg.exe" | Select-Object -First 1 -ExpandProperty FullName

      - name: Install winget
        uses: Cyberboss/install-winget@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Run Test Script
        run: |
          $startTime = Get-Date
          $timeout = [TimeSpan]::FromMinutes(5)
          try {
            .\scripts\Test-Manifest.ps1 -ManifestURL ${{inputs.ManifestURL}}
          } catch {
            Write-Error "Test script failed: $_"
          } finally {
            $elapsedTime = (Get-Date) - $startTime
            if ($elapsedTime -gt $timeout) {
              Write-Error "Test script exceeded the 5-minute timeout."
              exit 1
            }
          }

      - name: Take screenshot using FFmpeg
        shell: powershell
        run: |
          # Use FFmpeg to capture screen
          Write-Host "Capturing screenshot with FFmpeg..."
          & $ffmpegExe -f gdigrab -framerate 1 -i desktop -frames:v 1 ./screenshots/screenshot-${{ github.event.repository.updated_at}}.png
          
          # Verify screenshot was created
          if (Test-Path "./screenshots/screenshot-${{ github.event.repository.updated_at}}.png") {
            Write-Host "Screenshot captured successfully"
          } else {
            Write-Error "Screenshot capture failed"
            exit 1
          }

      - name: Commit and push
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
            commit_message: "${{ github.action }} - new screenhsot"
            file_pattern: ./screenshots/screenshot-${{ github.event.repository.updated_at}}.png

      - name: Upload Screenshot Artifact
        uses: actions/upload-artifact@v4
        with:
          name: virtual-display-screenshots
          path: ./screenshots/screenshot-${{ github.event.repository.updated_at}}.png
          retention-days: 5  # Artifacts will be kept for 5 days
